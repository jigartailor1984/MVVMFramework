using Common.Commands;
using Common.Triggers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;
using System.Windows.Interactivity;
using TriggerCollection = System.Windows.Interactivity.TriggerCollection;
namespace Common.Behaviors
{
    public class CloseTriggerDialogsBehavior : Behavior<Window>
    {
        #region Dependency Properties
        /// <summary>
        /// The command that gets fired when we want to close the dialogs, this command is internally defined
        /// </summary>
        public ICommand CloseDialogsCommand
        {
            get { return (ICommand)GetValue(CloseDialogsCommandProperty); }
            set { SetValue(CloseDialogsCommandProperty, value); }
        }

        // Using a DependencyProperty as the backing store for CloseDialogsCommand.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty CloseDialogsCommandProperty =
            DependencyProperty.Register("CloseDialogsCommand", typeof(ICommand), typeof(CloseTriggerDialogsBehavior), new UIPropertyMetadata(null));

        /// <summary>
        /// The trigger types we're looking for dialog triggers inside
        /// </summary>
        public Type TriggerType
        {
            get { return (Type)GetValue(TriggerTypeProperty); }
            set { SetValue(TriggerTypeProperty, value); }
        }

        // Using a DependencyProperty as the backing store for TriggerType.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty TriggerTypeProperty =
            DependencyProperty.Register("TriggerType", typeof(Type), typeof(CloseTriggerDialogsBehavior), new UIPropertyMetadata(null));

        #endregion

        #region Properties
        /// <summary>
        /// The collection of triggers that this behavior processes
        /// </summary>
        public TriggerCollection Triggers { get; private set; }

        #endregion

        #region Methods
        protected override void OnAttached()
        {
            base.OnAttached();

            Triggers = Interaction.GetTriggers(AssociatedObject);
            CloseDialogsCommand = new DelegateCommand(p => OnCloseDialogsCommandExecuted());
        }

        private void OnCloseDialogsCommandExecuted()
        {
            CloseDialogs();
        }

        /// <summary>
        /// Closes all of the dialogs generated by the trigger type in the Associated Object.
        /// </summary>
        public void CloseDialogs()
        {
            foreach (var trigger in Triggers)
            {
                if (TriggerType != null && trigger.GetType() != TriggerType)
                {
                    continue;
                }

                var dialogTriggers = trigger.Actions.Where(x => x is DialogTrigger);
                foreach (var triggerAction in dialogTriggers)
                {
                    var dialogTrigger = triggerAction as DialogTrigger;
                    if (dialogTrigger != null && ((dialogTrigger.ViewModel != null)))
                    {
                        dialogTrigger.ViewModel.CloseDialog();
                    }
                }
            }
        }

        #endregion
    }
}
